import {Component, inject, OnInit, ViewChild} from '@angular/core';
import {InfiniteScrollCustomEvent, IonModal} from "@ionic/angular";
import { OverlayEventDetail } from '@ionic/core/components';
import {ActivatedRoute} from "@angular/router";
import {GenerateService} from "../generate.service";

@Component({
  selector: 'app-#path#',
  template:`<ion-header [translucent]="true">
    <ion-toolbar>

<!--      nom de la page -->
      <ion-title>#path#</ion-title>
    </ion-toolbar>
  </ion-header>

  <ion-content [fullscreen]="true">

<!--    à modifier -->
    <ion-button id="open-modal" expand="block" class="ion-margin">Add #entity#</ion-button>
    <ion-modal trigger="open-modal" (willDismiss)="onWillDismiss($event)" id="mod" >
      <ng-template>
        <ion-header>
          <ion-toolbar>
            <ion-buttons slot="start">
              <ion-button (click)="cancel()">Cancel</ion-button>
            </ion-buttons>

            <!--    à modifier -->
            <ion-title class="ion-text-center" >Add #entity#</ion-title>

          </ion-toolbar>
        </ion-header>
        <ion-content class="ion-padding">
          <form  #myForms="ngForm">

<!--            inputs -->
            #inputInsert#

<!--              end inputs -->
                 <ion-item>
              <ion-buttons slot="end">
                <ion-button  (click)="create()" color="primary" [strong]="true">Confirm</ion-button>
              </ion-buttons>
            </ion-item>
          </form>
        </ion-content>
      </ng-template>
    </ion-modal>
    <ion-card>
      <ion-card-header>
<!--        a modifier -->
        <ion-card-title>List of #entity#</ion-card-title>
      </ion-card-header>
      <ion-card-content>

       <ion-item-divider color="light" class="ion-margin" style=" position: sticky; top: 0; z-index: 10;">
                <ion-label>page displayed : {{this.api_header.CurrentPage}}/{{this.api_header.TotalPages}} , total items : {{this.api_header.TotalCount}}, item displayed per page : {{this.api_header.PageSize}}</ion-label>
       <!--          page to display -->
                 <ion-select aria-label="page size" [(ngModel)]="pageSize" label="page size" [value]="pageSize" style="width: 10% ;" slot="end" (ionChange)="onPageSizeChange()">
                   <ion-select-option value="10">10</ion-select-option>
                   <ion-select-option value="20">20</ion-select-option>
                   <ion-select-option value="50">50</ion-select-option>
                 </ion-select>
       <!--          end page to display-->
        </ion-item-divider>

        <ion-grid>
          <ion-row style="font-weight: bolder; font-size: 130%">

<!--            a modifier : table title -->
            #header#
            <ion-col></ion-col>
            <ion-col></ion-col>
          </ion-row>

<!--          a modifier table content -->
          <ion-row *ngFor="let item of items ; let i = index">
           #tableValue#
            <ion-col> <ion-button
              color="primary"
              id="open-modify-modal{{i}}"
              (click)="show(item)"
            >modifier</ion-button></ion-col>
            <ion-col> <ion-button color="danger" (click)="delete(item.#id#)" >supprimer</ion-button></ion-col>

<!--            end table content -->
            <ion-modal trigger="open-modify-modal{{i}}" (willDismiss)="onWillDismiss($event)" id="mod2" >
              <ng-template>
                <ion-header>
                  <ion-toolbar>
                    <ion-buttons slot="start">
                      <ion-button (click)="cancel()">Cancel</ion-button>
                    </ion-buttons>
                    <ion-title class="ion-text-center" >Modify #entity#</ion-title>

                  </ion-toolbar>
                </ion-header>
                <ion-content class="ion-padding">
                  <form (ngSubmit)="modify()" #myForm="ngForm">

<!--                    update input -->
                    #inputUpdate#
<!--                       end update input -->
                    <ion-item>
                      <ion-buttons slot="end">
                        <ion-button type="submit" color="primary" [strong]="true">Confirm</ion-button>
                      </ion-buttons>
                    </ion-item>
                  </form>

                </ion-content>
              </ng-template>
            </ion-modal>

          </ion-row>

        </ion-grid>
        <!--   infinite scroll -->
                <ion-infinite-scroll [disabled]="!this.api_header.HasNext || !this.infiniteScroll" (ionInfinite)="doInfinite($event)">
                  <ion-infinite-scroll-content></ion-infinite-scroll-content>
                </ion-infinite-scroll>
              </ion-card-content>

              <!-- Pagination -->
              <ion-footer>
                <ion-toolbar>
                  <ion-buttons slot="start">
                    <ion-button (click)="goToPreviousPage()" [disabled]="!this.api_header.HasPrevious">Précédent</ion-button>
                  </ion-buttons>
                  <ion-buttons slot="end">
                    <ion-button (click)="goToNextPage()" [disabled]="!this.api_header.HasNext">Suivant</ion-button>
                  </ion-buttons>
                </ion-toolbar>
              </ion-footer>
    </ion-card>
    <!--modify part-->



  </ion-content>
  `,

  // a modifier
  styleUrls: ['./#path#.page.scss'],
})

// entity a modifier
export class #entity#Page implements OnInit {
  @ViewChild(IonModal) modal!: IonModal
  private genService = inject(GenerateService);
  private activatedRoute = inject(ActivatedRoute);
  public folder!: string

  // lien a modifier
  linked="#path#"
  formdata:any= {
  };
  updateFormData:any={}
  items: any[]=[];
  pageSize:number=10;
  pageNumber:number=1;
  api_header:any={}
  infiniteScroll:boolean=false


#values#

  constructor() {

  }

  ngOnInit() {
    this.folder = this.activatedRoute.snapshot.paramMap.get('id') as string;
    this.loadItems(this.folder);
    console.log("on init")

    #getValues#
  }


  onWillDismiss(event: Event) {
    const ev = event as CustomEvent<OverlayEventDetail<string>>;

  }

  create() {
    console.log("++"+JSON.stringify(this.formdata))
    this.genService.create(this.linked,this.formdata).subscribe(response => {
      this.loadItems(this.folder);
      console.log('Réponse du serveur :', response);
    });
  }

  modify(){
    this.genService.update(this.linked,this.updateFormData).subscribe(response => {
      this.loadItems(this.folder);
      console.log('Réponse du serveur :', response);
    });
    this.modal.dismiss(null, 'cancel');
  }
  delete(item:any){
    this.genService.delete(this.linked,item).subscribe(response => {
      this.loadItems(this.folder);
      console.log('Réponse du serveur :', response);
    });
    this.modal.dismiss(null, 'cancel');
  }

  show(item:any){
  this.updateFormData=item
  }

  cancel() {
    this.modal.dismiss(null, 'cancel');
  }

  private loadItems(folder: string) {
     this.genService.getAllPaginated(this.linked, this.pageNumber, this.pageSize).subscribe((data: any) => {
       this.api_header = JSON.parse(data.headers.get("x-pagination"))
       if(this.infiniteScroll){
         this.items = [...this.items, ...data.body];
       }
       else{
         this.items=data.body;
       }
     });
   }
    doInfinite(infiniteScroll: any) {

      if(this.api_header.TotalPages!==this.pageNumber){
        this.pageNumber=this.pageNumber+1
        this.loadItems(this.folder)
        setTimeout(() => {
          (infiniteScroll as InfiniteScrollCustomEvent).target.complete();
        }, 800);
      }
    }
    //   pagination

      goToNextPage() {
        const totalPages = this.api_header.TotalPages;
        if (this.pageNumber < totalPages) {
          this.pageNumber++;
          this.loadItems(this.folder);
        }
      }

      goToPreviousPage() {
        if (this.pageNumber > 1) {
          this.pageNumber--;
          this.loadItems(this.folder);
        }
      }
      onPageSizeChange() {
          this.loadItems(this.folder)
        }
}
